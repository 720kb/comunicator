{"version":3,"sources":["node/comunicator.js"],"names":["log","websocketConfigurationsMandatory","Error","jwtSaltKeyMandatory","Comunicator","websocketConfigurations","jwtSaltKey","comunicatorState","Map","internalObservable","socketServer","Server","subscriber","next","on","error","err","socket","connectedSockets","aSocket","length","isNaN","Number","delete","parsedMsg","JSON","parse","message","opcode","whoami","verify","token","set","toSend","send","stringify","sendPendingRequests","has","get","aSendPendingRequest","who","what","sendTo","data","managed","broadcast","close","share","subscriptionToInternalObservable","subscribe","observer","unsubscribe","Object","assign","prototype","hapiComunicator","default"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;;;AAEA,IAAMA,MAAM,qBAAM,yBAAN,CAAZ;AAAA,IACIC,mCAAmC,SAAnCA,gCAAmC,GAAM;AACzC,QAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD,CAHH;AAAA,IAIIC,sBAAsB,SAAtBA,mBAAsB,GAAM;AAC5B,QAAM,IAAID,KAAJ,CAAU,yCAAV,CAAN;AACD,CANH;;IAQME,W;;;AACJ,yBAA8G;AAAA,QAAlGC,uBAAkG,uEAAxEJ,kCAAwE;AAAA,QAApCK,UAAoC,uEAAvBH,qBAAuB;;AAAA;;AAE5G,QAAMI,mBAAmB;AACrB,0BAAoB,IAAIC,GAAJ,EADC;AAErB,6BAAuB,IAAIA,GAAJ;AAFF,KAAzB;AAAA,QAIIC,qBAAqB,qBAAe,sBAAc;;AAElD,UAAMC,eAAe,IAAI,aAAGC,MAAP,CAAcN,uBAAd,EAAuC;AAAA,eAAMO,WAAWC,IAAX,CAAgB;AAChF,kBAAQ;AADwE,SAAhB,CAAN;AAAA,OAAvC,CAArB;;AAIAH,mBAAaI,EAAb,CAAgB,OAAhB,EAAyB;AAAA,eAAOF,WAAWG,KAAX,CAAiB;AAC/C,kBAAQ,OADuC;AAE/C,mBAASC;AAFsC,SAAjB,CAAP;AAAA,OAAzB;;AAKAN,mBAAaI,EAAb,CAAgB,YAAhB,EAA8B,kBAAU;;AAEtCF,mBAAWC,IAAX,CAAgB;AACd,kBAAQ,MADM;AAEd,oBAAUI;AAFI,SAAhB;;AAKAA,eAAOH,EAAP,CAAU,OAAV,EAAmB,YAAM;AAAA;AAAA;AAAA;;AAAA;;AAEvB,iCAAsBP,iBAAiBW,gBAAvC,8HAAyD;AAAA,kBAA9CC,OAA8C;;;AAEvD,kBAAIA,WACFA,QAAQC,MAAR,KAAmB,CADjB,IAEFH,WAAWE,QAAQ,CAAR,CAFb,EAEyB;;AAEvB,oBAAIE,MAAMF,QAAQ,CAAR,CAAN,CAAJ,EAAuB;;AAErBP,6BAAWC,IAAX,CAAgB;AACd,4BAAQ,YADM;AAEd,8BAAUM,QAAQ,CAAR;AAFI,mBAAhB;AAID,iBAND,MAMO;;AAELP,6BAAWC,IAAX,CAAgB;AACd,4BAAQ,YADM;AAEd,8BAAUS,OAAOH,QAAQ,CAAR,CAAP;AAFI,mBAAhB;AAID;;AAEDZ,iCAAiBW,gBAAjB,CAAkCK,MAAlC,CAAyCJ,QAAQ,CAAR,CAAzC;AACD;AACF;AAxBsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBxB,SAzBD;;AA2BAF,eAAOH,EAAP,CAAU,OAAV,EAAmB;AAAA,iBAAOF,WAAWG,KAAX,CAAiB;AACzC,oBAAQ,OADiC;AAEzC,qBAASC;AAFgC,WAAjB,CAAP;AAAA,SAAnB;;AAKAC,eAAOH,EAAP,CAAU,SAAV,EAAqB,mBAAW;AAC9B,cAAMU,YAAYC,KAAKC,KAAL,CAAWC,OAAX,CAAlB;;AAEA;AACA,cAAIH,UAAUI,MAAV,KAAqB,MAAzB,EAAiC;;AAE/B5B,2CAA6BwB,UAAUK,MAAvC;AACA,mCAAIC,MAAJ,CAAWN,UAAUO,KAArB,EAA4BzB,UAA5B,EAAwC,eAAO;;AAE7C,kBAAIU,GAAJ,EAAS;;AAEPJ,2BAAWG,KAAX,CAAiB;AACf,0BAAQ,OADO;AAEf,2BAASC;AAFM,iBAAjB;AAID,eAND,MAMO;;AAELT,iCAAiBW,gBAAjB,CAAkCc,GAAlC,CAAsCR,UAAUK,MAAhD,EAAwDZ,MAAxD;AACA,oBAAMgB,SAAS;AACX,4BAAU,QADC;AAEX,4BAAUT,UAAUK,MAFT;AAGX,2BAASL,UAAUO;AAHR,iBAAf;;AAMAd,uBAAOiB,IAAP,CAAYT,KAAKU,SAAL,CAAeF,MAAf,CAAZ;AACArB,2BAAWC,IAAX,CAAgB;AACd,0BAAQ,aADM;AAEd,4BAAUW,UAAUK;AAFN,iBAAhB;AAIA,oBAAItB,iBAAiB6B,mBAAjB,CAAqCC,GAArC,CAAyCb,UAAUK,MAAnD,CAAJ,EAAgE;AAAA;AAAA;AAAA;;AAAA;;AAE9D,0CAAkCtB,iBAAiB6B,mBAAjB,CAAqCE,GAArC,CAAyCd,UAAUK,MAAnD,CAAlC,mIAA8F;AAAA,0BAAnFU,mBAAmF;;AAC5F,0BAAIA,uBACFA,oBAAoBV,MADlB,IAEFU,oBAAoBC,GAFlB,IAGFD,oBAAoBE,IAHtB,EAG4B;;AAE1B,8BAAKC,MAAL,CAAYH,oBAAoBV,MAAhC,EAAwCU,oBAAoBC,GAA5D,EAAiED,oBAAoBE,IAArF;AACD,uBAND,MAMO;;AAEL7B,mCAAWG,KAAX,CAAiB;AACf,kCAAQ,SADO;AAEf,mCAAS;AAFM,yBAAjB;AAID;AACF;AAhB6D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkB9DR,mCAAiB6B,mBAAjB,CAAqCb,MAArC,CAA4CC,UAAUK,MAAtD;AACD,iBAnBD,MAmBO;;AAELjB,6BAAWC,IAAX,CAAgB;AACd,4BAAQ,qBADM;AAEd,8BAAUW,UAAUK;AAFN,mBAAhB;AAID;AACF;AACF,aAjDD;AAkDD,WArDD;AAsDA;AACA,gBAAIL,UAAUI,MAAV,KAAqB,QAArB,IACFJ,UAAUmB,IADR,IAEFnB,UAAUmB,IAAV,CAAeH,GAFb,IAGFhB,UAAUmB,IAAV,CAAed,MAHb,IAIFL,UAAUmB,IAAV,CAAeF,IAJjB,EAIuB;;AAErB;AACAzC,qDAAqCwB,UAAUmB,IAAV,CAAed,MAApD,YAAiEL,UAAUmB,IAAV,CAAeH,GAAhF;AACA;AACA,qCAAIV,MAAJ,CAAWN,UAAUO,KAArB,EAA4BzB,UAA5B,EAAwC,eAAO;;AAE7C,oBAAIU,GAAJ,EAAS;;AAEPJ,6BAAWG,KAAX,CAAiB;AACf,4BAAQ,OADO;AAEf,6BAASC;AAFM,mBAAjB;AAID,iBAND,MAMO;;AAELJ,6BAAWC,IAAX,CAAgB;AACd,4BAAQ,iBADM;AAEd,8BAAUW,UAAUmB,IAAV,CAAed,MAFX;AAGd,2BAAOL,UAAUmB,IAAV,CAAeH,GAHR;AAId,4BAAQhB,UAAUmB,IAAV,CAAeF;AAJT,mBAAhB;AAMA,sBAAI,CAACjB,UAAUmB,IAAV,CAAeC,OAApB,EAA6B;;AAE3B,0BAAKF,MAAL,CAAYlB,UAAUmB,IAAV,CAAed,MAA3B,EAAmCL,UAAUmB,IAAV,CAAeH,GAAlD,EAAuDhB,UAAUmB,IAAV,CAAeF,IAAtE;AACD;AACF;AACF,eArBD;AAsBD,aA/BD;AAgCA;AACA,kBAAIjB,UAAUI,MAAV,KAAqB,WAArB,IACFJ,UAAUmB,IADR,IAEFnB,UAAUmB,IAAV,CAAed,MAFb,IAGFL,UAAUmB,IAAV,CAAeF,IAHjB,EAGuB;;AAErBzC,4DAA0CwB,UAAUmB,IAAV,CAAed,MAAzD;AACA,uCAAIC,MAAJ,CAAWN,UAAUO,KAArB,EAA4BzB,UAA5B,EAAwC,eAAO;;AAE7C,sBAAIU,GAAJ,EAAS;;AAEPJ,+BAAWG,KAAX,CAAiB;AACf,8BAAQ,OADO;AAEf,+BAASC;AAFM,qBAAjB;AAID,mBAND,MAMO;;AAELJ,+BAAWC,IAAX,CAAgB;AACd,8BAAQ,iBADM;AAEd,gCAAUW,UAAUmB,IAAV,CAAed,MAFX;AAGd,6BAAO,GAHO;AAId,8BAAQL,UAAUmB,IAAV,CAAeF;AAJT,qBAAhB;;AAOA,wBAAI,CAACjB,UAAUmB,IAAV,CAAeC,OAApB,EAA6B;;AAE3B,4BAAKC,SAAL,CAAerB,UAAUmB,IAAV,CAAed,MAA9B,EAAsCL,UAAUmB,IAAV,CAAeF,IAArD;AACD;AACF;AACF,iBAtBD;AAuBD,eA7BD,MA6BO;;AAEL7B,2BAAWG,KAAX,CAAiB;AACf,0BAAQ,SADO;AAEf,yDAAqCU,KAAKU,SAAL,CAAeX,SAAf;AAFtB,iBAAjB;AAID;AACF,SAhID;AAiID,OAxKD;;AA0KA,aAAO,YAAM;;AAEXd,qBAAaoC,KAAb;AACD,OAHD;AAID,KAzLsB,EAyLpBC,KAzLoB,EAJzB;;AAF4G,0HAiMtG,oBAAY;;AAEhB,UAAMC,mCAAmCvC,mBACtCwC,SADsC,CAC5BC,QAD4B,CAAzC;;AAGA,aAAO,YAAM;;AAEXF,yCAAiCG,WAAjC;AACD,OAHD;AAID,KA1M2G;;AA4M5GC,WAAOC,MAAP,CAAcjD,YAAYkD,SAA1B,EACE,oBAAK/C,gBAAL,CADF,EAEE,sBAAOA,gBAAP,CAFF,EAGE,yBAAUA,gBAAV,CAHF;AA5M4G;AAgN7G;;;;;AAGH;;;AACA,IAAMgD,kBAAkB,yCAAwBnD,WAAxB,CAAxB;AACA;;QAEuBoD,O,GAAfpD,W;QAAwBmD,e,GAAAA,e","file":"comunicator.js","sourcesContent":["import ws from 'ws';\nimport jwt from 'jsonwebtoken';\nimport {Observable} from '@reactivex/rxjs';\nimport debug from 'debug';\n\nimport user from './user';\nimport sendTo from './action/send-to';\nimport broadcast from './action/broadcast';\nimport hapiPlugin from './hapi/plugin';\n\nimport packageJSON from '../../package.json';\n\nconst log = debug('720kb:comunicator:debug')\n  , websocketConfigurationsMandatory = () => {\n    throw new Error('Missing mandatory parameter websocketConfigurations.');\n  }\n  , jwtSaltKeyMandatory = () => {\n    throw new Error('Missing mandatory parameter jwtSaltKey.');\n  };\n\nclass Comunicator extends Observable {\n  constructor(websocketConfigurations = websocketConfigurationsMandatory(), jwtSaltKey = jwtSaltKeyMandatory()) {\n\n    const comunicatorState = {\n        'connectedSockets': new Map(),\n        'sendPendingRequests': new Map()\n      }\n      , internalObservable = new Observable(subscriber => {\n\n        const socketServer = new ws.Server(websocketConfigurations, () => subscriber.next({\n          'type': 'ready'\n        }));\n\n        socketServer.on('error', err => subscriber.error({\n          'type': 'error',\n          'cause': err\n        }));\n\n        socketServer.on('connection', socket => {\n\n          subscriber.next({\n            'type': 'open',\n            'whoami': socket\n          });\n\n          socket.on('close', () => {\n\n            for (const aSocket of comunicatorState.connectedSockets) {\n\n              if (aSocket &&\n                aSocket.length === 2 &&\n                socket === aSocket[1]) {\n\n                if (isNaN(aSocket[0])) {\n\n                  subscriber.next({\n                    'type': 'user-leave',\n                    'whoami': aSocket[0]\n                  });\n                } else {\n\n                  subscriber.next({\n                    'type': 'user-leave',\n                    'whoami': Number(aSocket[0])\n                  });\n                }\n\n                comunicatorState.connectedSockets.delete(aSocket[0]);\n              }\n            }\n          });\n\n          socket.on('error', err => subscriber.error({\n            'type': 'error',\n            'cause': err\n          }));\n\n          socket.on('message', message => {\n            const parsedMsg = JSON.parse(message);\n\n            /* {'opcode': 'join', 'whoami': <id>, 'token': <jwt-token>} */\n            if (parsedMsg.opcode === 'join') {\n\n              log(`-- incoming join from ${parsedMsg.whoami}`);\n              jwt.verify(parsedMsg.token, jwtSaltKey, err => {\n\n                if (err) {\n\n                  subscriber.error({\n                    'type': 'error',\n                    'cause': err\n                  });\n                } else {\n\n                  comunicatorState.connectedSockets.set(parsedMsg.whoami, socket);\n                  const toSend = {\n                      'opcode': 'joined',\n                      'whoami': parsedMsg.whoami,\n                      'token': parsedMsg.token\n                    };\n\n                  socket.send(JSON.stringify(toSend));\n                  subscriber.next({\n                    'type': 'user-joined',\n                    'whoami': parsedMsg.whoami\n                  });\n                  if (comunicatorState.sendPendingRequests.has(parsedMsg.whoami)) {\n\n                    for (const aSendPendingRequest of comunicatorState.sendPendingRequests.get(parsedMsg.whoami)) {\n                      if (aSendPendingRequest &&\n                        aSendPendingRequest.whoami &&\n                        aSendPendingRequest.who &&\n                        aSendPendingRequest.what) {\n\n                        this.sendTo(aSendPendingRequest.whoami, aSendPendingRequest.who, aSendPendingRequest.what);\n                      } else {\n\n                        subscriber.error({\n                          'type': 'warning',\n                          'cause': 'A sending pending request is invalid.'\n                        });\n                      }\n                    }\n\n                    comunicatorState.sendPendingRequests.delete(parsedMsg.whoami);\n                  } else {\n\n                    subscriber.next({\n                      'type': 'no-pending-messages',\n                      'whoami': parsedMsg.whoami\n                    });\n                  }\n                }\n              });\n            } else\n            /* {'opcode': 'sendTo', 'token': <jwt-token>, 'data': {'whoami': <id>, 'who': <id>, 'what': payload}} */\n            if (parsedMsg.opcode === 'sendTo' &&\n              parsedMsg.data &&\n              parsedMsg.data.who &&\n              parsedMsg.data.whoami &&\n              parsedMsg.data.what) {\n\n              /*eslint-disable no-console*/\n              log(`-- incoming sent message from ${parsedMsg.data.whoami} to ${parsedMsg.data.who}`);\n              /*eslint-enable no-console*/\n              jwt.verify(parsedMsg.token, jwtSaltKey, err => {\n\n                if (err) {\n\n                  subscriber.error({\n                    'type': 'error',\n                    'cause': err\n                  });\n                } else {\n\n                  subscriber.next({\n                    'type': 'message-arrived',\n                    'whoami': parsedMsg.data.whoami,\n                    'who': parsedMsg.data.who,\n                    'what': parsedMsg.data.what\n                  });\n                  if (!parsedMsg.data.managed) {\n\n                    this.sendTo(parsedMsg.data.whoami, parsedMsg.data.who, parsedMsg.data.what);\n                  }\n                }\n              });\n            } else\n            /* {'whoami': whoami, 'token': <jwt-token>, 'data': {'who': '*', 'what': what}} */\n            if (parsedMsg.opcode === 'broadcast' &&\n              parsedMsg.data &&\n              parsedMsg.data.whoami &&\n              parsedMsg.data.what) {\n\n              log(`-- incoming broadcast message from ${parsedMsg.data.whoami}`);\n              jwt.verify(parsedMsg.token, jwtSaltKey, err => {\n\n                if (err) {\n\n                  subscriber.error({\n                    'type': 'error',\n                    'cause': err\n                  });\n                } else {\n\n                  subscriber.next({\n                    'type': 'message-arrived',\n                    'whoami': parsedMsg.data.whoami,\n                    'who': '*',\n                    'what': parsedMsg.data.what\n                  });\n\n                  if (!parsedMsg.data.managed) {\n\n                    this.broadcast(parsedMsg.data.whoami, parsedMsg.data.what);\n                  }\n                }\n              });\n            } else {\n\n              subscriber.error({\n                'type': 'warning',\n                'cause': `operation not permitted: ${JSON.stringify(parsedMsg)}`\n              });\n            }\n          });\n        });\n\n        return () => {\n\n          socketServer.close();\n        };\n      }).share();\n\n    super(observer => {\n\n      const subscriptionToInternalObservable = internalObservable\n        .subscribe(observer);\n\n      return () => {\n\n        subscriptionToInternalObservable.unsubscribe();\n      };\n    });\n\n    Object.assign(Comunicator.prototype,\n      user(comunicatorState),\n      sendTo(comunicatorState),\n      broadcast(comunicatorState));\n  }\n}\n\n/*eslint-disable one-var*/\nconst hapiComunicator = hapiPlugin(packageJSON, Comunicator);\n/*eslint-enable*/\n\nexport {Comunicator as default, hapiComunicator};\n"]}