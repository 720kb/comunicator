{"version":3,"sources":["comunicator.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AACA,IAAA,KAAA,QAAA,IAAA,CAAA;IACA,MAAA,QAAA,cAAA,CAAA;IACA,KAAA,QAAA,SAAA,CAAA;IACA,OAAA,QAAA,QAAA,CAAA;IACA,SAAA,QAAA,WAAA,CAAA;IACA,YAAA,QAAA,aAAA,CAAA;IACA,QAAA,QAAA,OAAA,EAAA,yBAAA,CAAA;IACA,mBAAA;AACA,sBAAA,IAAA,GAAA,EAAA;AACA,yBAAA,IAAA,GAAA,EAAA;CAFA;;IAKA;;;AACA,WADA,WACA,CAAA,uBAAA,EAAA,UAAA,EAAA;;;0BADA,aACA;;AAEA,QAAA,CAAA,uBAAA,IACA,CAAA,UAAA,EAAA;;AAEA,YAAA,IAAA,KAAA,6EAAA,kCAAA,UAAA,CAAA,CAFA;KADA;AAKA,QAAA,qBAAA,IAAA,GAAA,UAAA,CAAA,sBAAA;;AAEA,UAAA,eAAA,IAAA,GAAA,MAAA,CAAA,uBAAA,EAAA;eAAA,WAAA,IAAA,CAAA;AACA,kBAAA,OAAA;SADA;OAAA,CAAA,CAFA;;AAMA,mBAAA,EAAA,CAAA,OAAA,EAAA;eAAA,WAAA,KAAA,CAAA;AACA,kBAAA,OAAA;AACA,mBAAA,GAAA;SAFA;OAAA,CAAA,CANA;;AAWA,mBAAA,EAAA,CAAA,YAAA,EAAA,kBAAA;;AAEA,mBAAA,IAAA,CAAA;AACA,kBAAA,MAAA;AACA,oBAAA,MAAA;SAFA,EAFA;;AAOA,eAAA,EAAA,CAAA,OAAA,EAAA,YAAA;;;;;;;AAEA,iCAAA,iBAAA,gBAAA,0BAAA,oGAAA;kBAAA,sBAAA;;;AAEA,kBAAA,WACA,QAAA,MAAA,KAAA,CAAA,IACA,WAAA,QAAA,CAAA,CAAA,EAAA;;AAEA,oBAAA,MAAA,QAAA,CAAA,CAAA,CAAA,EAAA;;AAEA,6BAAA,IAAA,CAAA;AACA,4BAAA,YAAA;AACA,8BAAA,QAAA,CAAA,CAAA;mBAFA,EAFA;iBAAA,MAMA;;AAEA,6BAAA,IAAA,CAAA;AACA,4BAAA,YAAA;AACA,8BAAA,OAAA,QAAA,CAAA,CAAA,CAAA;mBAFA,EAFA;iBANA;;AAcA,iCAAA,gBAAA,CAAA,MAAA,CAAA,QAAA,CAAA,CAAA,EAhBA;eAFA;aAFA;;;;;;;;;;;;;;WAFA;SAAA,CAAA,CAPA;;AAkCA,eAAA,EAAA,CAAA,OAAA,EAAA;iBAAA,WAAA,KAAA,CAAA;AACA,oBAAA,OAAA;AACA,qBAAA,GAAA;WAFA;SAAA,CAAA,CAlCA;;AAuCA,eAAA,EAAA,CAAA,SAAA,EAAA,mBAAA;AACA,cAAA,YAAA,KAAA,KAAA,CAAA,OAAA,CAAA;;;AADA,cAIA,UAAA,MAAA,KAAA,MAAA,EAAA;;AAEA,6CAAA,UAAA,MAAA,CAAA,CAFA;AAGA,gBAAA,MAAA,CAAA,UAAA,KAAA,EAAA,UAAA,EAAA,eAAA;;AAEA,kBAAA,GAAA,EAAA;;AAEA,2BAAA,KAAA,CAAA;AACA,0BAAA,OAAA;AACA,2BAAA,GAAA;iBAFA,EAFA;eAAA,MAMA;;AAEA,iCAAA,gBAAA,CAAA,GAAA,CAAA,UAAA,MAAA,EAAA,MAAA,EAFA;AAGA,oBAAA,SAAA;AACA,4BAAA,QAAA;AACA,4BAAA,UAAA,MAAA;AACA,2BAAA,UAAA,KAAA;iBAHA,CAHA;;AASA,uBAAA,IAAA,CAAA,KAAA,SAAA,CAAA,MAAA,CAAA,EATA;AAUA,2BAAA,IAAA,CAAA;AACA,0BAAA,aAAA;AACA,4BAAA,UAAA,MAAA;iBAFA,EAVA;AAcA,oBAAA,iBAAA,mBAAA,CAAA,GAAA,CAAA,UAAA,MAAA,CAAA,EAAA;;;;;;;AAEA,0CAAA,iBAAA,mBAAA,CAAA,GAAA,CAAA,UAAA,MAAA,4BAAA,wGAAA;0BAAA,mCAAA;;AACA,0BAAA,uBACA,oBAAA,MAAA,IACA,oBAAA,GAAA,IACA,oBAAA,IAAA,EAAA;;AAEA,8BAAA,MAAA,CAAA,oBAAA,MAAA,EAAA,oBAAA,GAAA,EAAA,oBAAA,IAAA,CAAA,CAFA;uBAHA,MAMA;;AAEA,mCAAA,KAAA,CAAA;AACA,kCAAA,SAAA;AACA,mCAAA,uCAAA;yBAFA,EAFA;uBANA;qBADA;;;;;;;;;;;;;;mBAFA;;AAkBA,mCAAA,mBAAA,CAAA,MAAA,CAAA,UAAA,MAAA,CAAA,CAlBA;iBAAA,MAmBA;;AAEA,6BAAA,IAAA,CAAA;AACA,4BAAA,qBAAA;AACA,8BAAA,UAAA,MAAA;mBAFA,EAFA;iBAnBA;eApBA;aAFA,CAAA,CAHA;WAAA;;AAuDA,gBAAA,UAAA,MAAA,KAAA,QAAA,IACA,UAAA,IAAA,IACA,UAAA,IAAA,CAAA,GAAA,IACA,UAAA,IAAA,CAAA,MAAA,IACA,UAAA,IAAA,CAAA,IAAA,EAAA;;;AAGA,uDAAA,UAAA,IAAA,CAAA,MAAA,YAAA,UAAA,IAAA,CAAA,GAAA,CAAA;;AAHA,iBAKA,CAAA,MAAA,CAAA,UAAA,KAAA,EAAA,UAAA,EAAA,eAAA;;AAEA,oBAAA,GAAA,EAAA;;AAEA,6BAAA,KAAA,CAAA;AACA,4BAAA,OAAA;AACA,6BAAA,GAAA;mBAFA,EAFA;iBAAA,MAMA;;AAEA,6BAAA,IAAA,CAAA;AACA,4BAAA,iBAAA;AACA,8BAAA,UAAA,IAAA,CAAA,MAAA;AACA,2BAAA,UAAA,IAAA,CAAA,GAAA;AACA,4BAAA,UAAA,IAAA,CAAA,IAAA;mBAJA,EAFA;AAQA,sBAAA,CAAA,UAAA,IAAA,CAAA,OAAA,EAAA;;AAEA,0BAAA,MAAA,CAAA,UAAA,IAAA,CAAA,MAAA,EAAA,UAAA,IAAA,CAAA,GAAA,EAAA,UAAA,IAAA,CAAA,IAAA,CAAA,CAFA;mBAAA;iBAdA;eAFA,CAAA,CALA;aAJA;;AAiCA,kBAAA,UAAA,MAAA,KAAA,WAAA,IACA,UAAA,IAAA,IACA,UAAA,IAAA,CAAA,MAAA,IACA,UAAA,IAAA,CAAA,IAAA,EAAA;;AAEA,8DAAA,UAAA,IAAA,CAAA,MAAA,CAAA,CAFA;AAGA,oBAAA,MAAA,CAAA,UAAA,KAAA,EAAA,UAAA,EAAA,eAAA;;AAEA,sBAAA,GAAA,EAAA;;AAEA,+BAAA,KAAA,CAAA;AACA,8BAAA,OAAA;AACA,+BAAA,GAAA;qBAFA,EAFA;mBAAA,MAMA;;AAEA,+BAAA,IAAA,CAAA;AACA,8BAAA,iBAAA;AACA,gCAAA,UAAA,IAAA,CAAA,MAAA;AACA,6BAAA,GAAA;AACA,8BAAA,UAAA,IAAA,CAAA,IAAA;qBAJA,EAFA;;AASA,wBAAA,CAAA,UAAA,IAAA,CAAA,OAAA,EAAA;;AAEA,4BAAA,SAAA,CAAA,UAAA,IAAA,CAAA,MAAA,EAAA,UAAA,IAAA,CAAA,IAAA,CAAA,CAFA;qBAAA;mBAfA;iBAFA,CAAA,CAHA;eAHA,MA6BA;;AAEA,2BAAA,KAAA,CAAA;AACA,0BAAA,SAAA;AACA,yDAAA,KAAA,SAAA,CAAA,SAAA,CAAA;iBAFA,EAFA;eA7BA;SA5FA,CAAA,CAvCA;OAAA,CAAA,CAXA;;AAqLA,aAAA,YAAA;;AAEA,qBAAA,KAAA,GAFA;OAAA,CArLA;KAAA,CAAA,CAyLA,KAzLA,EAAA,CAPA;;0EADA,wBAmMA,oBAAA;;AAEA,UAAA,mCAAA,mBACA,SADA,CACA,QADA,CAAA,CAFA;;AAKA,aAAA,YAAA;;AAEA,yCAAA,WAAA,GAFA;OAAA,CALA;KAAA,GAlMA;GAAA;;SADA;EAAA,GAAA,UAAA;;AAgNA,OAAA,MAAA,CAAA,YAAA,SAAA,EACA,KAAA,gBAAA,CADA,EAEA,OAAA,gBAAA,CAFA,EAGA,UAAA,gBAAA,CAHA;;AAKA,OAAA,OAAA,GAAA;AACA,0BADA;AAEA,qBAAA,QAAA,eAAA,EAAA,WAAA,CAAA;CAFA","file":"comunicator.js","sourcesContent":["/**\n* comunicator\n* 3.0.0\n*\n* The 720kb notifier api (atm it uses websockets)\n* https://github.com/720kb/comunicator\n*\n* MIT license\n* Fri Feb 26 2016\n*/\n/*global require,module*/\nconst ws = require('ws')\n  , jwt = require('jsonwebtoken')\n  , Rx = require('rxjs/Rx')\n  , user = require('./user')\n  , sendTo = require('./send-to')\n  , broadcast = require('./broadcast')\n  , debug = require('debug')('720kb:comunicator:debug')\n  , comunicatorState = {\n    'connectedSockets': new Map(),\n    'sendPendingRequests': new Map()\n  };\n\nclass Comunicator extends Rx.Observable {\n  constructor(websocketConfigurations, jwtSaltKey) {\n\n    if (!websocketConfigurations ||\n       !jwtSaltKey) {\n\n      throw new Error(`Missing mandatory parameters [websocketConfigurations] - [jwtSaltKey]: ${websocketConfigurations} - ${jwtSaltKey}`);\n    }\n    const internalObservable = new Rx.Observable(subscriber => {\n\n      const socketServer = new ws.Server(websocketConfigurations, () => subscriber.next({\n        'type': 'ready'\n      }));\n\n      socketServer.on('error', err => subscriber.error({\n        'type': 'error',\n        'cause': err\n      }));\n\n      socketServer.on('connection', socket => {\n\n        subscriber.next({\n          'type': 'open',\n          'whoami': socket\n        });\n\n        socket.on('close', () => {\n\n          for (const aSocket of comunicatorState.connectedSockets) {\n\n            if (aSocket &&\n              aSocket.length === 2 &&\n              socket === aSocket[1]) {\n\n              if (isNaN(aSocket[0])) {\n\n                subscriber.next({\n                  'type': 'user-leave',\n                  'whoami': aSocket[0]\n                });\n              } else {\n\n                subscriber.next({\n                  'type': 'user-leave',\n                  'whoami': Number(aSocket[0])\n                });\n              }\n\n              comunicatorState.connectedSockets.delete(aSocket[0]);\n            }\n          }\n        });\n\n        socket.on('error', err => subscriber.error({\n          'type': 'error',\n          'cause': err\n        }));\n\n        socket.on('message', message => {\n          const parsedMsg = JSON.parse(message);\n\n          /* {'opcode': 'join', 'whoami': <id>, 'token': <jwt-token>} */\n          if (parsedMsg.opcode === 'join') {\n\n            debug(`-- incoming join from ${parsedMsg.whoami}`);\n            jwt.verify(parsedMsg.token, jwtSaltKey, err => {\n\n              if (err) {\n\n                subscriber.error({\n                  'type': 'error',\n                  'cause': err\n                });\n              } else {\n\n                comunicatorState.connectedSockets.set(parsedMsg.whoami, socket);\n                const toSend = {\n                    'opcode': 'joined',\n                    'whoami': parsedMsg.whoami,\n                    'token': parsedMsg.token\n                  };\n\n                socket.send(JSON.stringify(toSend));\n                subscriber.next({\n                  'type': 'user-joined',\n                  'whoami': parsedMsg.whoami\n                });\n                if (comunicatorState.sendPendingRequests.has(parsedMsg.whoami)) {\n\n                  for (const aSendPendingRequest of comunicatorState.sendPendingRequests.get(parsedMsg.whoami)) {\n                    if (aSendPendingRequest &&\n                      aSendPendingRequest.whoami &&\n                      aSendPendingRequest.who &&\n                      aSendPendingRequest.what) {\n\n                      this.sendTo(aSendPendingRequest.whoami, aSendPendingRequest.who, aSendPendingRequest.what);\n                    } else {\n\n                      subscriber.error({\n                        'type': 'warning',\n                        'cause': 'A sending pending request is invalid.'\n                      });\n                    }\n                  }\n\n                  comunicatorState.sendPendingRequests.delete(parsedMsg.whoami);\n                } else {\n\n                  subscriber.next({\n                    'type': 'no-pending-messages',\n                    'whoami': parsedMsg.whoami\n                  });\n                }\n              }\n            });\n          } else\n          /* {'opcode': 'sendTo', 'token': <jwt-token>, 'data': {'whoami': <id>, 'who': <id>, 'what': payload}} */\n          if (parsedMsg.opcode === 'sendTo' &&\n            parsedMsg.data &&\n            parsedMsg.data.who &&\n            parsedMsg.data.whoami &&\n            parsedMsg.data.what) {\n\n            /*eslint-disable no-console*/\n            debug(`-- incoming sent message from ${parsedMsg.data.whoami} to ${parsedMsg.data.who}`);\n            /*eslint-enable no-console*/\n            jwt.verify(parsedMsg.token, jwtSaltKey, err => {\n\n              if (err) {\n\n                subscriber.error({\n                  'type': 'error',\n                  'cause': err\n                });\n              } else {\n\n                subscriber.next({\n                  'type': 'message-arrived',\n                  'whoami': parsedMsg.data.whoami,\n                  'who': parsedMsg.data.who,\n                  'what': parsedMsg.data.what\n                });\n                if (!parsedMsg.data.managed) {\n\n                  this.sendTo(parsedMsg.data.whoami, parsedMsg.data.who, parsedMsg.data.what);\n                }\n              }\n            });\n          } else\n          /* {'whoami': whoami, 'token': <jwt-token>, 'data': {'who': '*', 'what': what}} */\n          if (parsedMsg.opcode === 'broadcast' &&\n            parsedMsg.data &&\n            parsedMsg.data.whoami &&\n            parsedMsg.data.what) {\n\n            debug(`-- incoming broadcast message from ${parsedMsg.data.whoami}`);\n            jwt.verify(parsedMsg.token, jwtSaltKey, err => {\n\n              if (err) {\n\n                subscriber.error({\n                  'type': 'error',\n                  'cause': err\n                });\n              } else {\n\n                subscriber.next({\n                  'type': 'message-arrived',\n                  'whoami': parsedMsg.data.whoami,\n                  'who': '*',\n                  'what': parsedMsg.data.what\n                });\n\n                if (!parsedMsg.data.managed) {\n\n                  this.broadcast(parsedMsg.data.whoami, parsedMsg.data.what);\n                }\n              }\n            });\n          } else {\n\n            subscriber.error({\n              'type': 'warning',\n              'cause': `operation not permitted: ${JSON.stringify(parsedMsg)}`\n            });\n          }\n        });\n      });\n\n      return () => {\n\n        socketServer.close();\n      };\n    }).share();\n\n    super(observer => {\n\n      const subscriptionToInternalObservable = internalObservable\n        .subscribe(observer);\n\n      return () => {\n\n        subscriptionToInternalObservable.unsubscribe();\n      };\n    });\n  }\n}\n\nObject.assign(Comunicator.prototype,\n  user(comunicatorState),\n  sendTo(comunicatorState),\n  broadcast(comunicatorState));\n\nmodule.exports = {\n  Comunicator,\n  'hapiComunicator': require('./hapi-plugin')(Comunicator)\n};\n"],"sourceRoot":"/source/"}