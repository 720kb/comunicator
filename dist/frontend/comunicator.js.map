{"version":3,"sources":["frontend/comunicator.js"],"names":["WebSocketCtor","window","WebSocket","err","whoReallyAmISym","Symbol","reallyTokenSym","websocketSym","queueSym","timeWaitSlice","timeWaitSliceChoices","giveMeATimeWait","Math","floor","random","length","Comunicator","websocketUrl","Error","internalObservable","Observable","inError","readyState","CONNECTING","OPEN","onopen","subscriber","next","event","target","push","shift","onmessage","parsedMsg","JSON","parse","data","opcode","whoami","who","what","onerror","error","onclose","send","messageToSend","stringify","close","share","subscriptionToInternalObservable","retryWhen","errors","switchMap","nextTimeWaitSliceChoice","pow","timer","subscribe","observer","unsubscribe","token","joinMessage","managed","toSend"],"mappings":"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","file":"comunicator.js","sourcesContent":["/*global window*/\nimport Rx from 'rxjs/Rx';\nimport WebSocket from 'ws';\nlet WebSocketCtor;\n\ntry {\n\n  WebSocketCtor = WebSocket;\n  if (!WebSocketCtor) {\n\n    WebSocketCtor = window.WebSocket;\n  }\n} catch (err) {\n\n  WebSocketCtor = window.WebSocket;\n}\n\nconst whoReallyAmISym = Symbol('whoReallyAmI')\n  , reallyTokenSym = Symbol('reallyToken')\n  , websocketSym = Symbol('websocket')\n  , queueSym = Symbol('queue')\n  , timeWaitSlice = 9000\n  , timeWaitSliceChoices = [0]\n  , giveMeATimeWait = () => {\n\n    return Math.floor(Math.random() * (timeWaitSliceChoices.length + 1));\n  };\n\nclass Comunicator extends Rx.Observable {\n  constructor(websocketUrl) {\n    if (!websocketUrl) {\n\n      throw new Error(`Mandatory parameter is missing: [websocketUrl] ${websocketUrl}`);\n    }\n\n    const internalObservable = new Rx.Observable(subscriber => {\n      let inError = false;\n\n      if (this[websocketSym] &&\n        (this[websocketSym].readyState !== WebSocketCtor.CONNECTING ||\n        this[websocketSym].readyState !== WebSocketCtor.OPEN)) {\n\n        inError = true;\n      }\n\n      if (typeof websocketUrl === 'string') {\n\n        this[websocketSym] = new WebSocketCtor(websocketUrl);\n      } else if (typeof websocketUrl === 'object' &&\n        websocketUrl instanceof WebSocketCtor) {\n\n        this[websocketSym] = websocketUrl;\n      } else {\n\n        throw new Error('websocket parameter passed is neither a string nor a WebSocket object');\n      }\n\n      this[websocketSym].onopen = event => {\n\n        subscriber.next({\n          'type': 'open',\n          'whoami': event.target\n        });\n\n        while (this[queueSym].length > 0 &&\n          this[websocketSym].readyState === WebSocketCtor.OPEN) {\n\n          this[websocketSym].push(this[queueSym].shift());\n        }\n      };\n\n      this[websocketSym].onmessage = event => {\n        const parsedMsg = JSON.parse(event.data);\n\n        if (parsedMsg.opcode === 'joined') {\n\n          subscriber.next({\n            'type': 'joined',\n            'whoami': parsedMsg.whoami\n          });\n        } else if (parsedMsg.opcode === 'to-me') {\n\n          subscriber.next({\n            'type': 'to-me',\n            'whoami': parsedMsg.whoami,\n            'who': parsedMsg.who,\n            'what': parsedMsg.what\n          });\n        } else if (parsedMsg.opcode === 'to-all') {\n\n          subscriber.next({\n            'type': 'to-all',\n            'whoami': parsedMsg.whoami,\n            'what': parsedMsg.what\n          });\n        }\n      };\n\n      this[websocketSym].onerror = error => {\n\n        subscriber.error({\n          'type': 'error',\n          'cause': error\n        });\n      };\n\n      this[websocketSym].onclose = () => {\n\n        subscriber.error({\n          'type': 'closed'\n        });\n      };\n\n      this[websocketSym].push = this[websocketSym].send;\n      this[websocketSym].send = (opcode, data) => {\n        const messageToSend = JSON.stringify({\n          opcode,\n          'token': this[reallyTokenSym],\n          data\n        });\n\n        if (this[websocketSym] &&\n          this[websocketSym].readyState === WebSocketCtor.OPEN) {\n\n          this[websocketSym].push(messageToSend);\n        } else {\n\n          this[queueSym].push(messageToSend);\n        }\n      };\n\n      if (inError &&\n        this[websocketSym].readyState !== WebSocketCtor.CONNECTING &&\n        this[websocketSym].readyState !== WebSocketCtor.OPEN) {\n\n        subscriber.error({\n          'type': 'closed'\n        });\n      }\n\n      return () => {\n\n        this[websocketSym].close();\n      };\n    }).share();\n\n    super(observer => {\n\n      const subscriptionToInternalObservable = internalObservable\n        .retryWhen(errors => errors.switchMap(() => {\n          const nextTimeWaitSliceChoice = timeWaitSlice * (Math.pow(2, timeWaitSliceChoices.length) - 1);\n\n          timeWaitSliceChoices.push(nextTimeWaitSliceChoice);\n          return Rx.Observable.timer(timeWaitSliceChoices[giveMeATimeWait()]);\n        }))\n        .subscribe(observer);\n\n      return () => {\n\n        subscriptionToInternalObservable.unsubscribe();\n      };\n    });\n\n    this[queueSym] = [];\n  }\n\n  userIsPresent(whoami, token) {\n\n    if (this[whoReallyAmISym] !== whoami ||\n      this[reallyTokenSym] !== token) {\n\n      if (whoami &&\n        token) {\n\n        this[whoReallyAmISym] = whoami;\n        this[reallyTokenSym] = token;\n\n        const joinMessage = JSON.stringify({\n          'opcode': 'join',\n          'whoami': this[whoReallyAmISym],\n          'token': this[reallyTokenSym]\n        });\n\n        if (this[websocketSym] &&\n          this[websocketSym].readyState === WebSocketCtor.OPEN) {\n\n          this[websocketSym].push(joinMessage);\n        } else {\n\n          this[queueSym].push(joinMessage);\n        }\n      } else {\n\n        throw new Error('User identification datas missing.');\n      }\n    } else {\n\n      throw new Error('User is already identified.');\n    }\n  }\n\n  sendTo(who, what, managed) {\n\n    if (this[whoReallyAmISym] &&\n      this[websocketSym]) {\n\n      const toSend = {\n        'whoami': this[whoReallyAmISym],\n        who,\n        what\n      };\n\n      if (managed) {\n\n        toSend.managed = true;\n      }\n\n      this[websocketSym].send('sendTo', toSend);\n    } else {\n\n      throw new Error('User identification required');\n    }\n  }\n\n  broadcast(what, managed) {\n\n    if (this[whoReallyAmISym] &&\n      this[websocketSym]) {\n\n      const toSend = {\n        'whoami': this[whoReallyAmISym],\n        'who': '*',\n        what\n      };\n\n      if (managed) {\n\n        toSend.managed = true;\n      }\n\n      this[websocketSym].send('broadcast', toSend);\n    } else {\n\n      throw new Error('User identification required');\n    }\n  }\n\n  get whoAmI() {\n\n    return this[whoReallyAmISym];\n  }\n}\n\nexport {Comunicator};\n"]}